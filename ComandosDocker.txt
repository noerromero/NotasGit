docker ps //Lista los contenedores ejecutandose
docker ps -a//Lista todos los contenedores ejecutandose
docker inspect [IDContenedor] //Lista toda la metadata del contenedor
docker inspect [NombreContenedor] //Lista toda la metadata del contenedor
docker inspect -f '{{ [Filtro] }}' [NombreContenedor] //Filtra una variable de la metadata
	Ejm: docker inspect -f '{{ json .Config.Env }}' 278b7a86ab6e
docker rename [NombreContenedor] [NuevoNombreContenedor]
docker run [NombreContenedor] //Correr o iniciar contenedor
docker logs [NombreContenedor]	//Lista todas las acciones ejecutadas por los procesos del contenedor
docker rm [NombreContenedor] //Elimina el contenedor
docker ps -aq //Lista solo los IDs de los contenedores
docker rm $(docker ps -aq) //Elimina todos los contenedores en base a su ID
docker run -it ubuntu //Descarga ubuntu y permite su uso en windows. Utilizar comando "exit" para salir de la instancia linux
docker run ubuntu [Comando] //Inicia la imagen con un comando. El comando determina el ciclo de vida del contenedor.
	Ejm. docker run ubuntu tail -f /dev/null //Ubuntu va a estar siempre en ejecuci�n. 
docker exec -it [NombreContenedor] bash //Permite utilizar el contenedor con el bash de ubuntu.
linux -> ps -fea //Lista los procesos ejecutados sobre el contenedor.
/*******Descargar servidor web nginx para usarlo****//
docker run -d --name server nginx //Descarga e inicializa servidor web
docker rm -f server //Detener servidor web
docker run -d --name server -p 8080:80 nginx //Enlazar el puerto de la maquina con el puerto del contenedor
/*******************************/
docker volume ls //Listar todos los volumenes de los contenedores
docker volume prune //Elimina todos los volumenes que no est�n en uso por los contenedores
docker volume create [nombreVolumen] //Crea un volumen. Lo que se escribe en el volumen no se pierde.
	Ejm. docker volume create dbadta
docker run -d --name db --mount src=[NombreVolumen],dst=[DestinoEspecificoDelVolumen] mongo //Crea una db mongo en el volumen dbdata.
	Ejem.docker run -d --name db --mount src=dbdata,dst=/data/db mongo 
docker pull [NombreContenedor] //Obtiene la imagen del contenedor. La imagen es la plantilla del contenedor.
docker image ls //Lista las imagenes usadas en la pc
docker pull [NombreContenedor]:[Version] //Obtiene la imagen del contenedor en una versi�n especifica.
	Ejm. docker pull ubuntu:1804
/*******Crear imagenes***********/
>touch Dockerfile  //Crea el archivo Dockerfile
>vim Dockerfile //Edita el archivo Dockerfile o Crear mediante explorador de windows
/***************************************************/
Inicia edici�n en vim
Recopilando y resumiendo los aportes de los comentarios. Primero pulsamos Esc para situarnos en el buffer inferior en modo normal, y
:q  sale del archivo, si no tenemos cambios sin guardar sale sin m�s.
:q!  sale del archivo descartando los cambios no guardados.
:w  guarda los cambios del archivo, pero no sale de Vim para seguir editando el archivo.
:wq  guarda los cambios y sale de Vim.
:x  igual que el anterior.
/***************************************************/
docker build -t [NombreImagen]:[Etiqueta] [RutaContexto] // Construye la imagen. La RutaContexto debe ser el directorio donde se encuentra el DockerFile
	ejem. docker build -t ubuntu:prueba ./ubuntuPrueba
Ahora ya se puede incializar la nueva imagen.
docker tag [NombreImagen]:[EtiquetaImagen] [IDUsuarioDockerHub]/[NombreImagen]:[EtiquetaImagen]  //Retagear una imagen con otro tag (Asociado al usuario dockerhub)
	Ejm. docker tag ubuntu:prueba noerromero/ubuntu:prueba
docker push noerromero/ubuntu:prueba //Pushear en DockerHub la imagen.
docker login noerromero //Loguearse desde PC, luego pide contrase�a.
docker history [NombreImagen]:[Tag] //Visualiza todas las capas de la imagen
	ejem. docker history ubuntu:prueba
docker run --rm -p 3000:3000 [NombreImagen] //Ejecuta contenedor (--rm) al terminar de correr el contenedor, se borra.
docker network ls  //Lista las redes disponibles para los contenedores
docker network create --attachable [NombreRed] //Crea una red. Attachable permite que otros contenedoers en el futuro se conecten a esa red
	Ejm.docker network create --attachable RedNoew
docker network connect [NombreRed] [NombreContenedor] //Conecta un contenedor a una determinada Red
	Ejm. docker network connect RedNoew db
docker network inspect [NombreRed] //Visuailzar los contenedores conectados a una red
docker run -d --name app -p 3000:3000 --env MONGO_URL=mongodb://db:27017/test [NombreImagen] //Correr contenedor configurando variable de entorno
docker network rm [NombreRed] //Elimina la red
docker container stop [container_id] //Detiene un contenedor
docker-compose up //Ejecuta archivo docker-compose.yml
docker-compose up -d //Ejecuta archivo docker-compose.yml pero no muestra log
Ctrl + C //Detiene los servicios de docker
docker-compose ps //Lista los contenedores ejecutados con el docker-compose.yml
docker-compose logs [NombreContenedor] //Lista los logs de un contenedor especifico del docker-compose.yml
docker-compose exec [NombreContenedor]	bash //Entrar al servidor del contenedor especificado del docker-compose.yml
docker-compose down //Elimina los contenedores iniciados con docker-compose
docker-compose build //Construye las imagenes configuradas en el docker compose
docker-compose logs -f [NombreImagen] //Muestra logs de la imangen
docker-compose scale [NombreImagen]=[NumeroContenedores]

//Clase Microservicios
--Detener contenedores en memoria y eliminarnos.
docker stop $(docker ps -q -a)
docker rm $(docker ps -q -a)

--ejecutar docker compose
docker-compose -f .\docker-compose-infr.yml up








